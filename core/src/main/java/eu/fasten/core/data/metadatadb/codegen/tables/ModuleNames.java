/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.tables;


import eu.fasten.core.data.metadatadb.codegen.Indexes;
import eu.fasten.core.data.metadatadb.codegen.Keys;
import eu.fasten.core.data.metadatadb.codegen.Public;
import eu.fasten.core.data.metadatadb.codegen.tables.records.ModuleNamesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModuleNames extends TableImpl<ModuleNamesRecord> {

    private static final long serialVersionUID = -1967660343;

    /**
     * The reference instance of <code>public.module_names</code>
     */
    public static final ModuleNames MODULE_NAMES = new ModuleNames();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModuleNamesRecord> getRecordType() {
        return ModuleNamesRecord.class;
    }

    /**
     * The column <code>public.module_names.id</code>.
     */
    public final TableField<ModuleNamesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('module_names_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.module_names.name</code>.
     */
    public final TableField<ModuleNamesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.module_names</code> table reference
     */
    public ModuleNames() {
        this(DSL.name("module_names"), null);
    }

    /**
     * Create an aliased <code>public.module_names</code> table reference
     */
    public ModuleNames(String alias) {
        this(DSL.name(alias), MODULE_NAMES);
    }

    /**
     * Create an aliased <code>public.module_names</code> table reference
     */
    public ModuleNames(Name alias) {
        this(alias, MODULE_NAMES);
    }

    private ModuleNames(Name alias, Table<ModuleNamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModuleNames(Name alias, Table<ModuleNamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ModuleNames(Table<O> child, ForeignKey<O, ModuleNamesRecord> key) {
        super(child, key, MODULE_NAMES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MODULE_NAMES_PKEY, Indexes.UNIQUE_MODULE_NAMES);
    }

    @Override
    public Identity<ModuleNamesRecord, Long> getIdentity() {
        return Keys.IDENTITY_MODULE_NAMES;
    }

    @Override
    public UniqueKey<ModuleNamesRecord> getPrimaryKey() {
        return Keys.MODULE_NAMES_PKEY;
    }

    @Override
    public List<UniqueKey<ModuleNamesRecord>> getKeys() {
        return Arrays.<UniqueKey<ModuleNamesRecord>>asList(Keys.MODULE_NAMES_PKEY, Keys.UNIQUE_MODULE_NAMES);
    }

    @Override
    public ModuleNames as(String alias) {
        return new ModuleNames(DSL.name(alias), this);
    }

    @Override
    public ModuleNames as(Name alias) {
        return new ModuleNames(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModuleNames rename(String name) {
        return new ModuleNames(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModuleNames rename(Name name) {
        return new ModuleNames(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
