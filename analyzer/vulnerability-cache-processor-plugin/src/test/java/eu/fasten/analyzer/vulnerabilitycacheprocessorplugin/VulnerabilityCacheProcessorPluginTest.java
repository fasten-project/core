/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package eu.fasten.analyzer.vulnerabilitycacheprocessorplugin;

import eu.fasten.core.data.MergedDirectedGraph;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

public class VulnerabilityCacheProcessorPluginTest {

    private VulnerabilityCacheProcessorPlugin.VulnerabilityCacheProcessorExtension pluginExtension;

    @BeforeEach
    public void setUp() {
        pluginExtension = new VulnerabilityCacheProcessorPlugin.VulnerabilityCacheProcessorExtension();
        pluginExtension.setTopics(Collections.singletonList("fasten.VulnerabilityCacheInvalidationExtension.out"));
    }

    @Test
    public void consumerTopicsTest() {
        var topics = Optional.of(Collections.singletonList("fasten.VulnerabilityCacheInvalidationExtension.out"));
        assertEquals(topics, pluginExtension.consumeTopic());
    }

    @Test
    public void consumerTopicChangeTest() {
        var topics1 = Optional.of(Collections.singletonList("fasten.VulnerabilityCacheInvalidationExtension.out"));
        assertEquals(topics1, pluginExtension.consumeTopic());
        var differentTopic = Collections.singletonList("DifferentKafkaTopic");
        pluginExtension.setTopics(differentTopic);
        assertEquals(Optional.of(differentTopic), pluginExtension.consumeTopic());
    }

    @Test
    public void pathFindingSimpleTest() {
        var dg = new MergedDirectedGraph();
        dg.addVertex(1L);
        dg.addVertex(2L);
        dg.addVertex(3L);
        dg.addVertex(4L);
        dg.addVertex(5L);
        dg.addEdge(1L, 2L);
        dg.addEdge(2L, 3L);
        dg.addEdge(3L, 4L);
        dg.addEdge(4L, 5L);
        var result = pluginExtension.getPathsToVulnerableNode(dg, 1, 5, new HashSet<>(), new ArrayList<>(), new ArrayList<>());
        assertEquals(List.of(
                Arrays.asList(1L, 2L, 3L, 4L, 5L)
        ), result);
    }

    @Test
    public void pathFindingHardTest() {
        var dg = new MergedDirectedGraph();
        dg.addVertex(1L);
        dg.addVertex(2L);
        dg.addVertex(3L);
        dg.addVertex(4L);
        dg.addVertex(5L);
        dg.addEdge(1L, 2L);
        dg.addEdge(1L, 3L);
        dg.addEdge(2L, 3L);
        dg.addEdge(2L, 4L);
        dg.addEdge(3L, 4L);
        dg.addEdge(4L, 1L);
        dg.addEdge(4L, 5L);
        var result = pluginExtension.getPathsToVulnerableNode(dg, 1, 5, new HashSet<>(), new ArrayList<>(), new ArrayList<>());
        assertEquals(List.of(
                Arrays.asList(1L, 2L, 3L, 4L, 5L),
                Arrays.asList(1L, 2L, 4L, 5L),
                Arrays.asList(1L, 3L, 4L, 5L)
        ), result);
    }

}
