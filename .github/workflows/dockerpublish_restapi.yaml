name: Publish Docker image

on:
  push:
    # Publish `develop` as Docker `latest` image.
    branches:
      - develop

  # Run tests for any PRs.
  pull_request:
    branches:
      - develop

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: fasten.restapi.snapshot

jobs:

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:

    runs-on: ubuntu-20.04
    if: github.event_name == 'push'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build project jar
        run: mvn clean install
      - name: Build REST API jar
        run: cd analyzer/restapi-plugin && mvn clean install spring-boot:repackage
      - name: Build image
        run: cd analyzer/restapi-plugin && docker build -t fasten.restapi.snapshot .
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "develop" ] && VERSION=${GITHUB_SHA::8}

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # Push images
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:latest
